{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOUWbUAKJcPy2z69eARXXYB",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/saishanakar/numpy/blob/main/univariant%20regression%20and%20l1%2Cl2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "id": "J57gxWF45oGl"
      },
      "outputs": [],
      "source": [
        "#importing the libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as s\n",
        "from sklearn import linear_model"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#reading the data from the csv file\n",
        "data=pd.read_csv('Company_data.csv')\n",
        "data\n",
        "data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cOVOCwVL7h6L",
        "outputId": "0dfeee48-1e7c-4e88-f812-b795f5d3f308"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(200, 4)"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Printing the first 5 rows in the csv file.\n",
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "nRRqed_77hFW",
        "outputId": "644e23ba-4d9c-4b68-bbec-f9d164de9b53"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      TV  Radio  Newspaper  Sales\n",
              "0  230.1   37.8       69.2   22.1\n",
              "1   44.5   39.3       45.1   10.4\n",
              "2   17.2   45.9       69.3   12.0\n",
              "3  151.5   41.3       58.5   16.5\n",
              "4  180.8   10.8       58.4   17.9"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-628a87a1-8e72-4e5f-a0c4-9263c9061b1d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>TV</th>\n",
              "      <th>Radio</th>\n",
              "      <th>Newspaper</th>\n",
              "      <th>Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>230.1</td>\n",
              "      <td>37.8</td>\n",
              "      <td>69.2</td>\n",
              "      <td>22.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>44.5</td>\n",
              "      <td>39.3</td>\n",
              "      <td>45.1</td>\n",
              "      <td>10.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17.2</td>\n",
              "      <td>45.9</td>\n",
              "      <td>69.3</td>\n",
              "      <td>12.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>151.5</td>\n",
              "      <td>41.3</td>\n",
              "      <td>58.5</td>\n",
              "      <td>16.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>180.8</td>\n",
              "      <td>10.8</td>\n",
              "      <td>58.4</td>\n",
              "      <td>17.9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-628a87a1-8e72-4e5f-a0c4-9263c9061b1d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-628a87a1-8e72-4e5f-a0c4-9263c9061b1d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-628a87a1-8e72-4e5f-a0c4-9263c9061b1d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "FM4HK18W8Imi",
        "outputId": "3ebb9256-d75c-4165-efda-23bd37351f3e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               TV       Radio   Newspaper       Sales\n",
              "count  200.000000  200.000000  200.000000  200.000000\n",
              "mean   147.042500   23.264000   30.554000   15.130500\n",
              "std     85.854236   14.846809   21.778621    5.283892\n",
              "min      0.700000    0.000000    0.300000    1.600000\n",
              "25%     74.375000    9.975000   12.750000   11.000000\n",
              "50%    149.750000   22.900000   25.750000   16.000000\n",
              "75%    218.825000   36.525000   45.100000   19.050000\n",
              "max    296.400000   49.600000  114.000000   27.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c459d336-720f-488c-a774-971e55292035\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>TV</th>\n",
              "      <th>Radio</th>\n",
              "      <th>Newspaper</th>\n",
              "      <th>Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>200.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>200.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>147.042500</td>\n",
              "      <td>23.264000</td>\n",
              "      <td>30.554000</td>\n",
              "      <td>15.130500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>85.854236</td>\n",
              "      <td>14.846809</td>\n",
              "      <td>21.778621</td>\n",
              "      <td>5.283892</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.700000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.300000</td>\n",
              "      <td>1.600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>74.375000</td>\n",
              "      <td>9.975000</td>\n",
              "      <td>12.750000</td>\n",
              "      <td>11.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>149.750000</td>\n",
              "      <td>22.900000</td>\n",
              "      <td>25.750000</td>\n",
              "      <td>16.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>218.825000</td>\n",
              "      <td>36.525000</td>\n",
              "      <td>45.100000</td>\n",
              "      <td>19.050000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>296.400000</td>\n",
              "      <td>49.600000</td>\n",
              "      <td>114.000000</td>\n",
              "      <td>27.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c459d336-720f-488c-a774-971e55292035')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c459d336-720f-488c-a774-971e55292035 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c459d336-720f-488c-a774-971e55292035');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#checking wheather there are any null values or not \n",
        "data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D3ck6BgF8Wm1",
        "outputId": "86ee540e-0185-4117-f36d-28bd52b9bb2d"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "TV           0\n",
              "Radio        0\n",
              "Newspaper    0\n",
              "Sales        0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#making the data correlated\n",
        "d=data.corr()\n",
        "d"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "Rn9k7PSk8iEo",
        "outputId": "3f8a662f-5c8a-43aa-abfc-58c2188d8ee6"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 TV     Radio  Newspaper     Sales\n",
              "TV         1.000000  0.054809   0.056648  0.901208\n",
              "Radio      0.054809  1.000000   0.354104  0.349631\n",
              "Newspaper  0.056648  0.354104   1.000000  0.157960\n",
              "Sales      0.901208  0.349631   0.157960  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-11efb8b1-1fe1-452a-9ded-a5aedee86dd6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>TV</th>\n",
              "      <th>Radio</th>\n",
              "      <th>Newspaper</th>\n",
              "      <th>Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>TV</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.054809</td>\n",
              "      <td>0.056648</td>\n",
              "      <td>0.901208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Radio</th>\n",
              "      <td>0.054809</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.354104</td>\n",
              "      <td>0.349631</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Newspaper</th>\n",
              "      <td>0.056648</td>\n",
              "      <td>0.354104</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.157960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sales</th>\n",
              "      <td>0.901208</td>\n",
              "      <td>0.349631</td>\n",
              "      <td>0.157960</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-11efb8b1-1fe1-452a-9ded-a5aedee86dd6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-11efb8b1-1fe1-452a-9ded-a5aedee86dd6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-11efb8b1-1fe1-452a-9ded-a5aedee86dd6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#fixing a target\n",
        "x = data['TV'].values\n",
        "y = data['Sales'].values"
      ],
      "metadata": {
        "id": "5ULqI44v880y"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Es9V9GAlAzsJ",
        "outputId": "67567bae-0b5c-458b-a848-a1eaf6eac17e"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(200, 4)"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x.shape,y.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0NUJa48w_2-p",
        "outputId": "b3cbfb81-4358-4d68-911f-e8cf1043fa4f"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((200,), (200,))"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=x.reshape(-1,1)\n",
        "x.shape\n",
        "Y=y.reshape(-1,1)\n",
        "Y.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "35Pa6pr3DKk5",
        "outputId": "7e2ead30-da0d-4697-e80f-fd0050ab51f8"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(200, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#plotting graph btww TV vs Sales\n",
        "plt.scatter(x,y)\n",
        "plt.xlabel('TV')\n",
        "plt.ylabel('Sales')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "BWYVG1rVEHyw",
        "outputId": "f95d553b-b669-4a4f-985c-d50b25ca886d"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#\n",
        "r=linear_model.LinearRegression()\n",
        "r.fit(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "fUkho6BJERjV",
        "outputId": "4248b1a9-27b8-47c0-8145-8dbb05f4f916"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "\n",
        "x_train,x_test,Y_train,Y_test = train_test_split(x,Y,test_size=0.1,random_state=1)\n",
        "x_train.shape,Y_train.shape,x_test.shape,Y_test.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aVf6QvtlFDe3",
        "outputId": "8641fc58-be88-4057-a80e-13f05196dbaa"
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((180, 1), (180, 1), (20, 1), (20, 1))"
            ]
          },
          "metadata": {},
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r=linear_model.LinearRegression()\n",
        "r.fit(x_train,Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "_0v1Hxp6IAEy",
        "outputId": "691f308b-2516-48b7-b344-0987b050482b"
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-7 {color: black;background-color: white;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 102
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Evaluating the model on training data only\n",
        "from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error\n",
        "y_pred = r.predict(x_train)\n",
        "\n",
        "print(f'MAE = {mean_absolute_error(Y_train, y_pred)}')\n",
        "print(f'MSE = {mean_squared_error(Y_train, y_pred)}')\n",
        "print(f'RMSE = {np.sqrt(mean_squared_error(Y_train, y_pred))}')\n",
        "print(f'R_2 = {r2_score(Y_train, y_pred)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8yqvWxCrHmxN",
        "outputId": "564f6789-d7ae-48bf-bb71-606e91c130bc"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MAE = 1.8186034801131281\n",
            "MSE = 5.149565076213515\n",
            "RMSE = 2.269265316399454\n",
            "R_2 = 0.8216681108294961\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "plt.scatter(x_train, Y_train, color='blue')\n",
        "plt.plot(x_train,y_pred, color='red', linewidth=3)\n",
        "plt.show()\n",
        "     \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "aLeWvRQIH3QS",
        "outputId": "4b7e78fc-2b1f-4dad-e563-61721b3d6606"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r=linear_model.LinearRegression()\n",
        "r.fit(x_test,Y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "bihtLyoiPxY7",
        "outputId": "b24dabca-62e1-48d0-b68a-e4880fe3d463"
      },
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-9 {color: black;background-color: white;}#sk-container-id-9 pre{padding: 0;}#sk-container-id-9 div.sk-toggleable {background-color: white;}#sk-container-id-9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-9 div.sk-item {position: relative;z-index: 1;}#sk-container-id-9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-9 div.sk-item::before, #sk-container-id-9 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-9 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-9 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-9 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-9 div.sk-label-container {text-align: center;}#sk-container-id-9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" checked><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error\n",
        "y_pred = r.predict(x_test)\n",
        "\n",
        "print(f'MAE = {mean_absolute_error(Y_test, y_pred)}')\n",
        "print(f'MSE = {mean_squared_error(Y_test, y_pred)}')\n",
        "print(f'RMSE = {np.sqrt(mean_squared_error(Y_test, y_pred))}')\n",
        "print(f'R_2 = {r2_score(Y_test, y_pred)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0wXdkviLP81h",
        "outputId": "ca856a1e-99cf-4c70-a5c9-7600f20b6754"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MAE = 1.7548198929679935\n",
            "MSE = 4.914241428614316\n",
            "RMSE = 2.2168088389877725\n",
            "R_2 = 0.6783683967894499\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x_test,Y_test,color='violet')\n",
        "plt.plot(x_test,y_pred,color='red',linewidth=5)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 266
        },
        "id": "zOIJy5BqQPlG",
        "outputId": "b76e14f4-da2c-4feb-810c-bf2dbb2d2b72"
      },
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import Lasso\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error"
      ],
      "metadata": {
        "id": "ADz_-_ncK_18"
      },
      "execution_count": 106,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r=Lasso(alpha=0.1)\n",
        "r.fit(x_train,Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "hw-df71AMAax",
        "outputId": "6344479b-eee4-476f-f4fa-ba591a550172"
      },
      "execution_count": 144,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Lasso(alpha=0.1)"
            ],
            "text/html": [
              "<style>#sk-container-id-19 {color: black;background-color: white;}#sk-container-id-19 pre{padding: 0;}#sk-container-id-19 div.sk-toggleable {background-color: white;}#sk-container-id-19 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-19 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-19 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-19 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-19 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-19 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-19 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-19 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-19 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-19 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-19 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-19 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-19 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-19 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-19 div.sk-item {position: relative;z-index: 1;}#sk-container-id-19 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-19 div.sk-item::before, #sk-container-id-19 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-19 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-19 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-19 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-19 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-19 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-19 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-19 div.sk-label-container {text-align: center;}#sk-container-id-19 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-19 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-19\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Lasso(alpha=0.1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" checked><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso(alpha=0.1)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 144
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error\n",
        "y_pred = r.predict(x_train)\n",
        "\n",
        "print(f'MAE = {mean_absolute_error(Y_train, y_pred)}')\n",
        "print(f'MSE = {mean_squared_error(Y_train, y_pred)}')\n",
        "print(f'RMSE = {np.sqrt(mean_squared_error(Y_train, y_pred))}')\n",
        "print(f'R_2 = {r2_score(Y_train, y_pred)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AT7FlUrGM1y-",
        "outputId": "3000a0c8-9eb6-4fff-e3b5-ff3237c363a2"
      },
      "execution_count": 145,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MAE = 1.818640794888622\n",
            "MSE = 5.149566422723195\n",
            "RMSE = 2.269265613083492\n",
            "R_2 = 0.8216680641992251\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x_train,Y_train,color='violet')\n",
        "plt.plot(x_train,y_pred,color='red',linewidth=5)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "AtXBiy16RFZG",
        "outputId": "80cc930c-1253-425e-e550-0eb6873aa4a1"
      },
      "execution_count": 146,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error\n",
        "y_pred = r.predict(x_test)\n",
        "\n",
        "print(f'MAE = {mean_absolute_error(Y_test, y_pred)}')\n",
        "print(f'MSE = {mean_squared_error(Y_test, y_pred)}')\n",
        "print(f'RMSE = {np.sqrt(mean_squared_error(Y_test, y_pred))}')\n",
        "print(f'R_2 = {r2_score(Y_test, y_pred)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-YcDNPicRvtc",
        "outputId": "12988fe5-642a-4c9a-ddad-e7e3e595956a"
      },
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MAE = 1.9390224641299496\n",
            "MSE = 5.9128945195860245\n",
            "RMSE = 2.431644406484226\n",
            "R_2 = 0.6130076693269876\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x_test,Y_test,color='violet')\n",
        "plt.plot(x_test,y_pred,color='red',linewidth=3)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "YCx8pYgfR6pz",
        "outputId": "4dcf8abd-042f-4097-887b-22e473c19d0f"
      },
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import Ridge\n"
      ],
      "metadata": {
        "id": "1Oj2DTipSMxD"
      },
      "execution_count": 149,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r=Ridge(alpha=0.001)\n",
        "r.fit(x_train,Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "vzf34ZKHS59g",
        "outputId": "f3b2b90b-a1bd-4d67-b77a-b09500ba597c"
      },
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Ridge(alpha=0.001)"
            ],
            "text/html": [
              "<style>#sk-container-id-20 {color: black;background-color: white;}#sk-container-id-20 pre{padding: 0;}#sk-container-id-20 div.sk-toggleable {background-color: white;}#sk-container-id-20 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-20 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-20 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-20 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-20 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-20 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-20 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-20 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-20 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-20 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-20 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-20 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-20 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-20 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-20 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-20 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-20 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-20 div.sk-item {position: relative;z-index: 1;}#sk-container-id-20 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-20 div.sk-item::before, #sk-container-id-20 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-20 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-20 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-20 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-20 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-20 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-20 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-20 div.sk-label-container {text-align: center;}#sk-container-id-20 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-20 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-20\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Ridge(alpha=0.001)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" checked><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge(alpha=0.001)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 150
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error\n",
        "y_pred = r.predict(x_train)\n",
        "\n",
        "print(f'MAE = {mean_absolute_error(Y_train, y_pred)}')\n",
        "print(f'MSE = {mean_squared_error(Y_train, y_pred)}')\n",
        "print(f'RMSE = {np.sqrt(mean_squared_error(Y_train, y_pred))}')\n",
        "print(f'R_2 = {r2_score(Y_train, y_pred)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lu7qWF6eTnq1",
        "outputId": "1bec25b9-5fa3-42a9-e4e0-0fab74f1d82e"
      },
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MAE = 1.8186034802303024\n",
            "MSE = 5.149565076213515\n",
            "RMSE = 2.269265316399454\n",
            "R_2 = 0.8216681108294961\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x_train,Y_train,color='violet')\n",
        "plt.plot(x_train,y_pred,color='red',linewidth=5)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "M-cnONspUSbi",
        "outputId": "3bd00c6e-af4a-4c6a-9c31-dfbe517392a1"
      },
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error\n",
        "y_pred = r.predict(x_test)\n",
        "\n",
        "print(f'MAE = {mean_absolute_error(Y_test, y_pred)}')\n",
        "print(f'MSE = {mean_squared_error(Y_test, y_pred)}')\n",
        "print(f'RMSE = {np.sqrt(mean_squared_error(Y_test, y_pred))}')\n",
        "print(f'R_2 = {r2_score(Y_test, y_pred)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "URgEBB9QUwD2",
        "outputId": "9443f777-f3f1-4fe8-b6aa-fac8ae378bb8"
      },
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MAE = 1.9394068285996782\n",
            "MSE = 5.914993875560187\n",
            "RMSE = 2.432076042306282\n",
            "R_2 = 0.6128702688273402\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x_test,Y_test,color='violet')\n",
        "plt.plot(x_test,y_pred,color='red',linewidth=3)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "JsUu4J7qU_Kx",
        "outputId": "52f4995c-f739-4182-ff43-5f7b4077784e"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}